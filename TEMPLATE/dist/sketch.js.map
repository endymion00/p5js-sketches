{"version":3,"file":"sketch.js","sources":["../src/common/environment.ts","../src/common/ds/array.ts","../src/common/p5util/shared.ts","../src/common/boundingBox.ts","../src/common/p5util/transform.ts","../src/common/p5util/canvas.ts","../src/common/p5util/setup.ts","../src/common/p5util/main.ts","../src/common/p5util/pause.ts","../src/common/p5util/pixels.ts","../src/settings.ts","../src/constants.ts","../src/main.ts"],"sourcesContent":["/**\r\n * ---- Common environment utility -------------------------------------------\r\n */\r\n\r\nimport { RectangleSize } from \"./dataTypes\";\r\n\r\n/**\r\n * Finds HTML element by `id`. If not found, returns `document.body`.\r\n * @param id\r\n */\r\nexport const getElementOrBody = (id: string): HTMLElement =>\r\n  document.getElementById(id) || document.body;\r\n\r\n/**\r\n * Returns the width and height of `node`.\r\n * If `node === document.body`, returns the inner width and height of `window`.\r\n * @param node\r\n */\r\nexport const getElementSize = (node: Element): RectangleSize =>\r\n  node === document.body\r\n    ? {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n      }\r\n    : node.getBoundingClientRect();\r\n","/**\r\n * ---- Common array utility -------------------------------------------------\r\n */\r\n\r\nimport { ArrayOrValue } from \"../dataTypes\";\r\n\r\nexport const loopLimited = <T>(\r\n  array: readonly T[],\r\n  callback: (currentValue: T, index?: number, array?: readonly T[]) => void,\r\n  arrayLength: number\r\n): void => {\r\n  for (let i = 0; i < arrayLength; i += 1) {\r\n    callback(array[i], i, array);\r\n  }\r\n};\r\n\r\n/**\r\n * Runs `callback` once for each element of `array`.\r\n * Unlike `forEach()`, an element of `array` should not be removed during the iteration.\r\n * @param array\r\n * @param callback\r\n */\r\nexport const loop = <T>(\r\n  array: readonly T[],\r\n  callback: (currentValue: T, index?: number, array?: readonly T[]) => void\r\n): void => {\r\n  const arrayLength = array.length;\r\n\r\n  for (let i = 0; i < arrayLength; i += 1) {\r\n    callback(array[i], i, array);\r\n  }\r\n};\r\n\r\nexport const loopBackwardsLimited = <T>(\r\n  array: readonly T[],\r\n  callback: (currentValue: T, index?: number, array?: readonly T[]) => void,\r\n  arrayLength: number\r\n): void => {\r\n  if (arrayLength < 0)\r\n    throw new RangeError(`arrayLength ${arrayLength} is invalid.`);\r\n\r\n  while (arrayLength--) {\r\n    callback(array[arrayLength], arrayLength, array);\r\n  }\r\n};\r\n\r\n/**\r\n * Runs `callback` once for each element of `array` in descending order.\r\n * @param array\r\n * @param callback\r\n */\r\nexport const loopBackwards = <T>(\r\n  array: readonly T[],\r\n  callback: (currentValue: T, index?: number, array?: readonly T[]) => void\r\n): void => {\r\n  let arrayLength = array.length;\r\n\r\n  while (arrayLength--) {\r\n    callback(array[arrayLength], arrayLength, array);\r\n  }\r\n};\r\n\r\nexport const nestedLoopJoinLimited = <T, U>(\r\n  array: readonly T[],\r\n  otherArray: readonly U[],\r\n  callback: (element: T, otherElement: U) => void,\r\n  arrayLength: number,\r\n  otherArrayLength: number\r\n): void => {\r\n  for (let i = 0; i < arrayLength; i += 1) {\r\n    for (let k = 0; k < otherArrayLength; k += 1) {\r\n      callback(array[i], otherArray[k]);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Joins two arrays and runs `callback` once for each joined pair.\r\n * @param array\r\n * @param otherArray\r\n * @param callback\r\n */\r\nexport const nestedLoopJoin = <T, U>(\r\n  array: readonly T[],\r\n  otherArray: readonly U[],\r\n  callback: (element: T, otherElement: U) => void\r\n): void => {\r\n  nestedLoopJoinLimited(\r\n    array,\r\n    otherArray,\r\n    callback,\r\n    array.length,\r\n    otherArray.length\r\n  );\r\n};\r\n\r\nexport const roundRobinLimited = <T>(\r\n  array: readonly T[],\r\n  callback: (element: T, otherElement: T) => void,\r\n  arrayLength: number\r\n): void => {\r\n  const iLen = arrayLength - 1;\r\n  for (let i = 0; i < iLen; i += 1) {\r\n    for (let k = i + 1; k < arrayLength; k += 1) {\r\n      callback(array[i], array[k]);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Runs `callback` once for each pair within `array`.\r\n * @param array\r\n * @param callback\r\n */\r\nexport const roundRobin = <T>(\r\n  array: readonly T[],\r\n  callback: (element: T, otherElement: T) => void\r\n): void => roundRobinLimited(array, callback, array.length);\r\n\r\n/**\r\n * Creates a new 1-dimensional array by concatenating sub-array elements of a 2-dimensional array.\r\n * @param arrays\r\n * @return A new 1-dimensional array.\r\n */\r\n// eslint-disable-next-line prefer-spread\r\nexport const flatNaive = <T>(arrays: readonly T[][]): readonly T[] =>\r\n  ([] as T[]).concat(...arrays);\r\n\r\n/**\r\n * An alternative to `Array.prototype.flat()`.\r\n * @param array\r\n * @param depth\r\n * @return A new array.\r\n */\r\nexport const flatRecursive = <T>(array: ArrayOrValue<T>[], depth: number = 1) =>\r\n  depth > 0\r\n    ? array.reduce(\r\n        (acc: ArrayOrValue<T>[], cur): ArrayOrValue<T>[] =>\r\n          acc.concat(Array.isArray(cur) ? flatRecursive(cur, depth - 1) : cur),\r\n        []\r\n      )\r\n    : array;\r\n","/**\r\n * ---- p5 shared variables --------------------------------------------------\r\n */\r\n\r\nimport p5 from \"p5\";\r\nimport { ScaledCanvas } from \"./canvas\";\r\n\r\n/**\r\n * The shared `p5` instance.\r\n */\r\nexport let p: p5;\r\n\r\n/**\r\n * The shared `ScaledCanvas` instance.\r\n */\r\nexport let canvas: ScaledCanvas;\r\n\r\n/**\r\n * Sets the given `p5` instance to be shared.\r\n * @param instance\r\n */\r\nexport const setP5Instance = (instance: p5): void => {\r\n  p = instance;\r\n};\r\n\r\n/**\r\n * Sets the given `ScaledCanvas` instance to be shared.\r\n * @param scaledCanvas\r\n */\r\nexport const setCanvas = (scaledCanvas: ScaledCanvas): void => {\r\n  canvas = scaledCanvas;\r\n};\r\n","/**\r\n * ---- Common bounding box utility ------------------------------------------\r\n */\r\n\r\nimport { RectangleSize } from \"./dataTypes\";\r\nimport { Vector2D } from \"./ds/vector-2d\";\r\n\r\n/**\r\n * Calculates the aspect ratio i.e. `width / height`.\r\n * @param size\r\n */\r\nexport const getAspectRatio = (size: RectangleSize): number =>\r\n  size.width / size.height;\r\n\r\n/**\r\n * Calculates the area i.e. `width * height`.\r\n * @param size\r\n */\r\nexport const getArea = (size: RectangleSize): number =>\r\n  size.width * size.height;\r\n\r\n/**\r\n * Returns `true` if `size` contains `point`.\r\n * @param size\r\n */\r\nexport const containsPoint = (\r\n  size: RectangleSize,\r\n  point: Vector2D,\r\n  margin: number\r\n): boolean => {\r\n  const { x, y } = point;\r\n  return (\r\n    x >= margin &&\r\n    y >= margin &&\r\n    x < size.width - margin &&\r\n    y < size.height - margin\r\n  );\r\n};\r\n\r\n/**\r\n * Parameter for `getScaleFactor()`.\r\n * `FIT_TO_BOX` checks both width and height and returns the smaller scale factor.\r\n */\r\nexport const enum FittingOption {\r\n  FIT_TO_BOX = \"FIT_TO_BOX\",\r\n  FIT_WIDTH = \"FIT_WIDTH\",\r\n  FIT_HEIGHT = \"FIT_HEIGHT\"\r\n}\r\n\r\n/**\r\n * Calculates the scale factor for fitting `nonScaledSize` to `targetSize` keeping the original aspect ratio.\r\n *\r\n * @param nonScaledSize\r\n * @param targetSize\r\n * @param fittingOption\r\n */\r\nexport const getScaleFactor = (\r\n  nonScaledSize: RectangleSize,\r\n  targetSize: RectangleSize,\r\n  fittingOption?: FittingOption\r\n): number => {\r\n  switch (fittingOption) {\r\n    default:\r\n    case FittingOption.FIT_TO_BOX:\r\n      return Math.min(\r\n        targetSize.width / nonScaledSize.width,\r\n        targetSize.height / nonScaledSize.height\r\n      );\r\n\r\n    case FittingOption.FIT_WIDTH:\r\n      return targetSize.width / nonScaledSize.width;\r\n\r\n    case FittingOption.FIT_HEIGHT:\r\n      return targetSize.height / nonScaledSize.height;\r\n  }\r\n};\r\n","/**\r\n * ---- p5.js transformation utility -----------------------------------------\r\n */\r\n\r\nimport p5 from \"p5\";\r\nimport { p } from \"./shared\";\r\n\r\n/**\r\n * Runs `drawCallback` translated with `offsetX` and `offsetY`,\r\n * then restores the transformation by calling `p.translate()` with negative values.\r\n * Used to avoid calling `p.push()` and `p.pop()` frequently.\r\n *\r\n * @param drawCallback\r\n * @param offsetX\r\n * @param offsetY\r\n */\r\nexport const drawTranslated = (\r\n  drawCallback: () => void | p5,\r\n  offsetX: number,\r\n  offsetY: number\r\n): void => {\r\n  p.translate(offsetX, offsetY);\r\n  drawCallback();\r\n  p.translate(-offsetX, -offsetY);\r\n};\r\n\r\n/**\r\n * Runs `drawCallback` rotated with `angle`,\r\n * then restores the transformation by calling `p.rotate()` with the negative value.\r\n * Used to avoid calling `p.push()` and `p.pop()` frequently.\r\n *\r\n * @param drawCallback\r\n * @param angle\r\n */\r\nexport const drawRotated = (\r\n  drawCallback: () => void | p5,\r\n  angle: number\r\n): void => {\r\n  p.rotate(angle);\r\n  drawCallback();\r\n  p.rotate(-angle);\r\n};\r\n\r\n/**\r\n * Composite of `drawTranslated()` and `drawRotated()`.\r\n *\r\n * @param drawCallback\r\n * @param offsetX\r\n * @param offsetY\r\n * @param angle\r\n */\r\nexport const drawTranslatedAndRotated = (\r\n  drawCallback: () => void | p5,\r\n  offsetX: number,\r\n  offsetY: number,\r\n  angle: number\r\n): void => {\r\n  p.translate(offsetX, offsetY);\r\n  drawRotated(drawCallback, angle);\r\n  p.translate(-offsetX, -offsetY);\r\n};\r\n\r\n/**\r\n * Runs `drawCallback` scaled with `scaleFactor`,\r\n * then restores the transformation by scaling with the inversed factor.\r\n * Used to avoid calling `p.push()` and `p.pop()` frequently.\r\n *\r\n * @param drawCallback\r\n * @param scaleFactor\r\n */\r\nexport const drawScaled = (\r\n  drawCallback: () => void | p5,\r\n  scaleFactor: number\r\n): void => {\r\n  p.scale(scaleFactor);\r\n  drawCallback();\r\n  p.scale(1 / scaleFactor);\r\n};\r\n","/**\r\n * ---- p5.js canvas utility -------------------------------------------------\r\n */\r\n\r\nimport p5 from \"p5\";\r\nimport { p } from \"./shared\";\r\nimport { RectangleSize } from \"../dataTypes\";\r\nimport { FittingOption, getScaleFactor } from \"../boundingBox\";\r\nimport { getElementOrBody, getElementSize } from \"../environment\";\r\nimport { Vector2D } from \"../ds/vector-2d\";\r\nimport { drawScaled } from \"./transform\";\r\n\r\n/**\r\n * p5.js canvas accompanied by a scale factor.\r\n */\r\nexport interface ScaledCanvas {\r\n  readonly p5Canvas: p5.Renderer;\r\n  readonly scaleFactor: number;\r\n  readonly logicalSize: RectangleSize;\r\n  readonly drawScaled: (drawCallback: () => void) => void;\r\n  readonly logicalCenterPosition: Vector2D;\r\n}\r\n\r\n/**\r\n * Runs `p.createCanvas()` with the scaled size that fits to `node`.\r\n * Returns the created canvas and the scale factor.\r\n *\r\n * @param node - The HTML element or its ID.\r\n * @param logicalSize\r\n * @param fittingOption\r\n * @param renderer\r\n */\r\nexport const createScaledCanvas = (\r\n  node: HTMLElement | string,\r\n  logicalSize: RectangleSize,\r\n  fittingOption?: FittingOption,\r\n  renderer?: \"p2d\" | \"webgl\" | undefined\r\n): ScaledCanvas => {\r\n  const maxCanvasSize = getElementSize(\r\n    typeof node === \"string\" ? getElementOrBody(node) : node\r\n  );\r\n  const scaleFactor = getScaleFactor(logicalSize, maxCanvasSize, fittingOption);\r\n\r\n  const canvas = p.createCanvas(\r\n    scaleFactor * logicalSize.width,\r\n    scaleFactor * logicalSize.height,\r\n    renderer\r\n  );\r\n\r\n  return {\r\n    p5Canvas: canvas,\r\n    scaleFactor: scaleFactor,\r\n    logicalSize: logicalSize,\r\n    drawScaled: (drawCallback: () => void): void =>\r\n      drawScaled(drawCallback, scaleFactor),\r\n    logicalCenterPosition: {\r\n      x: logicalSize.width / 2,\r\n      y: logicalSize.height / 2\r\n    }\r\n  };\r\n};\r\n","/**\r\n * ---- p5util setup ----------------------------------------------------------\r\n */\r\n\r\nimport p5 from \"p5\";\r\n\r\n/**\r\n * A list of functions that will be called in `p.setup()`.\r\n */\r\nexport const onSetup: ((p: p5) => void)[] = [];\r\n","/**\r\n * ---- p5util main -----------------------------------------------------------\r\n */\r\n\r\nimport p5 from \"p5\";\r\nimport { getElementOrBody } from \"../environment\";\r\nimport { RectangleSize } from \"../dataTypes\";\r\nimport { loop } from \"../ds/array\";\r\nimport { setP5Instance, setCanvas } from \"./shared\";\r\nimport { createScaledCanvas } from \"./canvas\";\r\nimport { onSetup } from \"./setup\";\r\n\r\n/**\r\n * Settings data that should be passed to `startSketch()`.\r\n */\r\nexport interface SketchSettings {\r\n  /**\r\n   * The HTML element (or its ID) to which the canvas should belong.\r\n   */\r\n  htmlElement: HTMLElement | string;\r\n\r\n  /**\r\n   * The logical (i.e. non-scaled) size of the canvas, e.g. `{ width: 640, height: 480 }`;\r\n   */\r\n  logicalCanvasSize: RectangleSize;\r\n\r\n  /**\r\n   * Function that will be called in `p.setup()` just after creating the canvas.\r\n   * The canvas will be automatically created and should not be manually created in this function.\r\n   */\r\n  initialize: () => void;\r\n\r\n  /**\r\n   * Function that should set several methods of `p5` instance, e.g. `p.draw()`.\r\n   */\r\n  setP5Methods: (p5Instance: p5) => void;\r\n}\r\n\r\n/**\r\n * Calls `new p5()` with the given settings information.\r\n * @param settings\r\n */\r\nexport const startSketch = (settings: SketchSettings): void => {\r\n  const htmlElement =\r\n    typeof settings.htmlElement === \"string\"\r\n      ? getElementOrBody(settings.htmlElement)\r\n      : settings.htmlElement;\r\n\r\n  new p5((p: p5): void => {\r\n    setP5Instance(p);\r\n    p.setup = (): void => {\r\n      setCanvas(createScaledCanvas(htmlElement, settings.logicalCanvasSize));\r\n      settings.initialize();\r\n      loop(onSetup, listener => listener(p));\r\n      onSetup.length = 0;\r\n    };\r\n    settings.setP5Methods(p);\r\n  }, htmlElement);\r\n};\r\n","/**\r\n * ---- p5.js pause utility --------------------------------------------------\r\n */\r\n\r\nimport { p } from \"./shared\";\r\n\r\nlet paused = false;\r\n\r\n/**\r\n * Pauses the sketch by `p.noLoop()`.\r\n * If already paused, resumes by `p.loop()`.\r\n */\r\nexport const pauseOrResume = (): void => {\r\n  if (paused) {\r\n    p.loop();\r\n    paused = false;\r\n  } else {\r\n    p.noLoop();\r\n    paused = true;\r\n  }\r\n};\r\n","/**\r\n * ---- p5.js pixels utility -------------------------------------------------\r\n */\r\n\r\nimport p5 from \"p5\";\r\nimport { p } from \"./shared\";\r\n\r\n/**\r\n * Runs `drawCallback` and `p.loadPixels()`, then returns `p.pixels`.\r\n * The style and transformations will be restored by using `p.push()` and `p.pop()`.\r\n * @param p The p5 instance.\r\n * @param drawCallback\r\n */\r\nexport const createPixels = (drawCallback: () => void | p5): number[] => {\r\n  p.push();\r\n  drawCallback();\r\n  p.pop();\r\n  p.loadPixels();\r\n\r\n  return p.pixels;\r\n};\r\n\r\n/**\r\n * Replaces the whole pixels of the canvas.\r\n * Assigns the given pixels to `p.pixels` and calls `p.updatePixels()`.\r\n * @param pixels\r\n */\r\nexport const replacePixels = (pixels: number[]): void => {\r\n  p.pixels = pixels;\r\n  p.updatePixels();\r\n};\r\n","/**\r\n * ---- Settings -------------------------------------------------------------\r\n */\r\n\r\nimport { getElementOrBody } from \"./common/environment\";\r\nimport { RectangleSize } from \"./common/dataTypes\";\r\n\r\n/**\r\n * The id of the HTML element to which the canvas should belong.\r\n */\r\nexport const HTML_ELEMENT_ID = \"Template\";\r\n\r\n/**\r\n * The HTML element to which the canvas should belong.\r\n */\r\nexport const HTML_ELEMENT = getElementOrBody(HTML_ELEMENT_ID);\r\n\r\n/**\r\n * The logical size of the canvas.\r\n */\r\nexport const LOGICAL_CANVAS_SIZE: RectangleSize = {\r\n  width: 800,\r\n  height: 800\r\n};\r\n","/**\r\n * ---- Constants ------------------------------------------------------------\r\n */\r\n\r\nundefined;\r\n\r\nexport const BACKGROUND_COLOR = \"#F8F8F8\";\r\nexport const SQUARE_COLOR = \"#202020\";\r\nexport const SQUARE_SIZE = 100;\r\nexport const ROTATION_SPEED = 0.05;\r\n","/**\r\n * ---- Main -----------------------------------------------------------------\r\n */\r\n\r\nimport p5 from \"p5\";\r\n\r\nimport { startSketch } from \"./common/p5util/main\";\r\nimport { p, canvas } from \"./common/p5util/shared\";\r\n\r\nimport { pauseOrResume } from \"./common/p5util/pause\";\r\nimport { createPixels, replacePixels } from \"./common/p5util/pixels\";\r\nimport { drawTranslatedAndRotated } from \"./common/p5util/transform\";\r\n\r\nimport { HTML_ELEMENT, LOGICAL_CANVAS_SIZE } from \"./settings\";\r\nimport * as constants from \"./constants\";\r\n\r\n// ---- variables | functions ----\r\n\r\nlet drawBackground: () => void;\r\n\r\n// ---- reset & initialize ----\r\n\r\nconst reset = (): void => {};\r\n\r\nconst initialize = (): void => {\r\n  const backgroundColor = p.color(constants.BACKGROUND_COLOR);\r\n  const backgroundPixels = createPixels(() => p.background(backgroundColor));\r\n  drawBackground = replacePixels.bind(null, backgroundPixels);\r\n\r\n  p.noStroke();\r\n  p.fill(constants.SQUARE_COLOR);\r\n  p.rectMode(p.CENTER);\r\n\r\n  reset();\r\n};\r\n\r\n// ---- draw ----\r\n\r\nconst drawSquare = () => p.square(0, 0, constants.SQUARE_SIZE);\r\n\r\nconst drawSketch = (): void => {\r\n  const center = canvas.logicalCenterPosition;\r\n  drawTranslatedAndRotated(\r\n    drawSquare,\r\n    center.x,\r\n    center.y,\r\n    p.frameCount * constants.ROTATION_SPEED\r\n  );\r\n};\r\n\r\nconst draw = (): void => {\r\n  drawBackground();\r\n  canvas.drawScaled(drawSketch);\r\n};\r\n\r\n// ---- UI ----\r\n\r\nconst mousePressed = (): void => {};\r\n\r\nconst keyTyped = (): void => {\r\n  switch (p.key) {\r\n    case \"p\":\r\n      pauseOrResume();\r\n      break;\r\n    case \"s\":\r\n      p.save(\"image.png\");\r\n      break;\r\n    case \"r\":\r\n      reset();\r\n      break;\r\n  }\r\n};\r\n\r\n// ---- start sketch ----\r\n\r\nconst setP5Methods = (p: p5): void => {\r\n  p.draw = draw;\r\n  p.mousePressed = mousePressed;\r\n  p.keyTyped = keyTyped;\r\n};\r\n\r\nstartSketch({\r\n  htmlElement: HTML_ELEMENT,\r\n  logicalCanvasSize: LOGICAL_CANVAS_SIZE,\r\n  initialize,\r\n  setP5Methods\r\n});\r\n"],"names":["constants.BACKGROUND_COLOR","constants.SQUARE_COLOR","constants.SQUARE_SIZE","constants.ROTATION_SPEED"],"mappings":"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"}